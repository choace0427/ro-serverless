service: cognito-test
useDotenv: true
package:
  individually: true
provider:
  name: aws
  runtime: nodejs18.x
  tracing:
    lambda: true
  region: us-east-1
  memorySize: 1024
  timeout: 90
  stage: development
  environment:
    USER_POOL_ID: "us-east-1_S7sLLIp4a"
    CLIENT_ID: "564kqj04mi2knsf7oratc5upbk"
    S3_BUCKET_NAME: ${self:custom.bucket}

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  webpack:
    webpackConfig: "webpack.config.js"
    packager: "npm"
    includeModules: true
  serverless-offline:
    httpPort: 4000
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
  stage: ${opt:stage, self:provider.stage}
  bucket: ${self:service}-${self:provider.stage}
  optimize:
    external:
      - aws-jwt-verify

functions:
  signup:
    handler: api/auth/signup.handler
    events:
      - http:
          path: /api/auth/signup
          method: post
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
  verify:
    handler: api/auth/verify.handler
    events:
      - http:
          path: /api/auth/verify
          method: post
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: cognito-test-user
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]
        UsernameAttributes: ["email"]
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: cognito-test-client
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
    StorageBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:custom.bucket}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    iamCustomRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:custom.stage}-dynamodb-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:service}-${self:custom.stage}-dynamodb-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:*
                    - s3:*
                    - ses:*
                    - cognito-idp:*
                  Resource:
                    - "*"
